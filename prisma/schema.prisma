// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//Admin
// number: 998994381501
//password: 12345

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String     @unique @map("username") @db.VarChar(32)
  password  String     @map("password")
  blogs     Blog[]
  posts     Post[]
  comments  Comment[]
  isActive  Boolean    @default(true) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  UserBlog  UserBlog[]

  @@id([id])
  @@map("user")
}

model Blog {
  id          String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String     @map("title")
  description String     @map("description")
  authorId    String     @map("author_id") @db.Uuid
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  posts       Post[]
  createdAt   DateTime   @default(now()) @map("created_at")
  deletedAt   DateTime?  @map("deleted_at")
  UserBlog    UserBlog[]

  @@id([id])
  @@map("blog")
}

model UserBlog {
  id        String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String    @unique @map("blog_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([id])
  @@map("user_blog")
}

model Post {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @map("title")
  description String    @map("description")
  blogId      String    @map("blog_id") @db.Uuid
  authorId    String    @map("author_id") @db.Uuid
  views       Int       @map("views") @default(0)
  blog        Blog      @relation(fields: [blogId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")

  @@id([id])
  @@map("post")
}

model Comment {
  id          String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String    @map("description")
  postId      String    @map("post_id") @db.Uuid
  authorId    String    @map("author_id") @db.Uuid
  post        Post      @relation(fields: [postId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")

  @@id([id])
  @@map("comment")
}
